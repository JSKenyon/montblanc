#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015 Simon Perkins
#
# This file is part of montblanc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import logging
import os
import subprocess
import sys

#==============
# Setup logging
#==============

log_format = "%(name)s - %(levelname)s - %(message)s"
logging.basicConfig(level=logging.INFO, format=log_format)
log = logging.getLogger('Montblanc Install')

mb_path = 'montblanc'
mb_inc_path = os.path.join(mb_path, 'include')

#=================
# Setup setuptools
#=================

import ez_setup
ez_setup.use_setuptools()

from setuptools import setup, find_packages
from setuptools.extension import Extension
from setuptools.dist import Distribution

#=======================
# Monkeypatch distutils
#=======================

#
_DISTUTILS_REINIT = Distribution.reinitialize_command

def reinitialize_command(self, command, reinit_subcommands):
    """
    Monkeypatch distutils.Distribution.reinitialize_command() to match behavior
    of Distribution.get_command_obj()
    This fixes a problem where 'pip install -e' does not reinitialise options
    using the setup(options={...}) variable for the build_ext command.
    This also effects other option sourcs such as setup.cfg.
    """
    cmd_obj = _DISTUTILS_REINIT(self, command, reinit_subcommands)

    options = self.command_options.get(command)

    if options:
        self._set_command_options(cmd_obj, options)

    return cmd_obj

Distribution.reinitialize_command = reinitialize_command

#============================
# Detect CUDA and GPU Devices
#============================

# See if CUDA is installed and if any NVIDIA devices are available
# Choose the tensorflow flavour to install (CPU or GPU)
try:
    from install import cuda
    device_info, nvcc_settings = cuda.inspect_cuda()
    tensorflow_flavour = 'tensorflow-gpu'

    from install import cub
    cub.install_cub(mb_inc_path)
except Exception as e:
    log.info("CUDA not found: {}".format(str(e)))
    device_info, nvcc_settings = {}, { 'cuda_available' : False }
    tensorflow_flavour = 'tensorflow'

def get_version():
    # Versioning code here, based on
    # http://blogs.nopcode.org/brainstorm/2013/05/20/pragmatic-python-versioning-via-setuptools-and-git-tags/

    # Fetch version from git tags, and write to version.py.
    # Also, when git is not available (PyPi package), use stored version.py.
    version_py = os.path.join('montblanc', 'version.py')

    try:
        version_git = subprocess.check_output(['git', 'describe', '--tags']).rstrip()
    except:
        with open(version_py, 'r') as fh:
            version_git = open(version_py).read().strip().split('=')[-1].replace('"','')

    version_msg = "# Do not edit this file, pipeline versioning is governed by git tags"

    with open(version_py, 'w') as fh:
        fh.write(version_msg + os.linesep + "__version__=\"" + version_git +"\"")

    return version_git

def readme():
    with open('README.rst') as f:
        return f.read()

def include_pkg_dirs():
    """
    Recursively provide package_data directories for
    directories in montblanc/include.
    """
    pkg_dirs = []

    l = len(mb_path) + len(os.sep)
    # Ignore
    exclude = ['docs', '.git', '.svn']

    # Walk 'montblanc/include'
    for root, dirs, files in os.walk(mb_inc_path, topdown=True):
        # Prune out everything we're not interested in
        # from os.walk's next yield.
        dirs[:] = [d for d in dirs if d not in exclude]

        for d in dirs:
            # OK, so everything starts with 'montblanc/'
            # Take everything after that ('include...') and
            # append a '/*.*' to it
            pkg_dirs.append(os.path.join(root[l:], d, '*.*'))

    return pkg_dirs

tf_min_version = "0.12.1"
tf_max_version = "0.13.0"
tf_version_str = "{} >= {}, < {}".format(tensorflow_flavour,
                                        tf_min_version,
                                        tf_max_version)
install_requires=[
    'astropy >= 1.2.1',
    'attrdict >= 2.0.0',
    'attrs >= 16.3.0',
    'enum34 >= 1.1.2',
    'funcsigs >= 0.4',
    'futures >= 3.0.3',
    'hypercube == 0.3.0a6',
    'numpy >= 1.9.2',
    'numexpr >= 2.4',
    'python-casacore >= 2.1.2',
    tf_version_str,
]

from install.tensorflow_ops_ext import BuildCommand, tensorflow_extension_name

setup(name='montblanc',
    version=get_version(),
    description='GPU-accelerated RIME implementations.',
    long_description=readme(),
    url='http://github.com/ska-sa/montblanc',
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: Other/Proprietary License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Scientific/Engineering :: Astronomy",
    ],
    author='Simon Perkins',
    author_email='simon.perkins@gmail.com',
    cmdclass={ 'build_ext' : BuildCommand },
    # tensorflow_ops_ext.BuildCommand.finalize_options
    # will fill the modules in
    ext_modules=[Extension(tensorflow_extension_name, ['rime.cu'])],
    options={
        'build_ext' : {
            'nvcc_settings' : nvcc_settings,
            'cuda_devices' : device_info,
        },
    },
    license='GPL2',
    install_requires=install_requires,
    packages=find_packages(),
    package_data={'montblanc': include_pkg_dirs()},
    include_package_data=True,
    zip_safe=False)
