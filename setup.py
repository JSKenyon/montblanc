#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015 Simon Perkins
#
# This file is part of montblanc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys

import ez_setup
ez_setup.use_setuptools()

from setuptools import setup, find_packages

mb_path = 'montblanc'
mb_inc_path = os.path.join(mb_path, 'include')

install_requires=[
    'astropy >= 1.2.1',
    'attrdict >= 2.0.0',
    'attrs >= 16.3.0',
    'enum34 >= 1.1.2',
    'funcsigs >= 0.4',
    'futures >= 3.0.3',
    'hypercube == 0.3.0a6',
    'numpy >= 1.9.2',
    'numexpr >= 2.4',
    'python-casacore >= 2.1.2',
]

setup_requires=['numpy >= 1.9.2']

def get_version():
    # Versioning code here, based on
    # http://blogs.nopcode.org/brainstorm/2013/05/20/pragmatic-python-versioning-via-setuptools-and-git-tags/

    # Fetch version from git tags, and write to version.py.
    # Also, when git is not available (PyPi package), use stored version.py.
    version_py = os.path.join('montblanc', 'version.py')

    try:
        version_git = subprocess.check_output(['git', 'describe', '--tags']).rstrip()
    except:
        with open(version_py, 'r') as fh:
            version_git = open(version_py).read().strip().split('=')[-1].replace('"','')

    version_msg = "# Do not edit this file, pipeline versioning is governed by git tags"

    with open(version_py, 'w') as fh:
        fh.write(version_msg + os.linesep + "__version__=\"" + version_git +"\"")

    return version_git

def readme():
    with open('README.rst') as f:
        return f.read()

def include_pkg_dirs():
    """
    Recursively provide package_data directories for
    directories in montblanc/include.
    """
    pkg_dirs = []

    l = len(mb_path) + len(os.sep)
    # Ignore
    exclude = ['docs', '.git', '.svn']

    # Walk 'montblanc/include'
    for root, dirs, files in os.walk(mb_inc_path, topdown=True):
        # Prune out everything we're not interested in
        # from os.walk's next yield.
        dirs[:] = [d for d in dirs if d not in exclude]

        for d in dirs:
            # OK, so everything starts with 'montblanc/'
            # Take everything after that ('include...') and
            # append a '/*.*' to it
            pkg_dirs.append(os.path.join(root[l:], d, '*.*'))

    return pkg_dirs

setup(name='montblanc',
    version=get_version(),
    description='GPU-accelerated RIME implementations.',
    long_description=readme(),
    url='http://github.com/ska-sa/montblanc',
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: Other/Proprietary License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Scientific/Engineering :: Astronomy",
    ],
    author='Simon Perkins',
    author_email='simon.perkins@gmail.com',
    license='GPL2',
    install_requires=install_requires,
    setup_requires=setup_requires,
    packages=find_packages(),
    package_data={'montblanc': include_pkg_dirs()},
    include_package_data=True,
    zip_safe=False)
